{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "contracts/IQuestionsController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IQuestionsController {\r\n\r\n\t\tfunction isAllowedToList(uint gameID, address potentialLister) external view returns (bool);\r\n\r\n\t\tfunction isRefereeFor(uint gameID, address potentialReferee) external view returns (bool);\r\n\r\n\t\tfunction gameToken(uint gameID) external view returns (IERC20);\r\n\r\n\t\t// The implementing code must also GUARANTEE this value is in the positive int range, < 2**255.\r\n\t\tfunction maxQuestionBid(uint gameID) external view returns (uint256);\r\n\r\n\t\tfunction sponsorFractionOfOptionPool(uint gameID) external view returns (uint24);\r\n\r\n}\r\n"
    },
    "contracts/PayableOwnable.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\n//A simple extension of Ownable that allows withdrawal of funds sent to a contract.\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract PayableOwnable is Ownable {\r\n\r\n\tevent ERC20Withdrawal(\r\n\t\taddress recipient,\r\n\t\tuint256 amountPaidOut,\r\n\t\tIERC20 tokenContract\r\n\t);\r\n\r\n\tevent EthWithdrawal(\r\n\t\taddress recipient,\r\n\t\tuint256 amountPaidOut\r\n\t);\r\n\r\n\tconstructor(\r\n\t\taddress payable initialOwner\r\n\t)\r\n\t\tOwnable(initialOwner)\r\n\t{\r\n\t}\r\n\r\n\tfunction withdrawERC20Tokens(\r\n\t\taddress recipient,\r\n\t\tuint256 payAmount,\r\n\t\tIERC20 tokenContract\r\n\t) virtual public onlyOwner {\r\n\t\trequire(_withdrawERC20Tokens(\r\n\t\t\trecipient,\r\n\t\t\tpayAmount,\r\n\t\t\ttokenContract\r\n\t\t), 'Token withdrawal failed.');\r\n\t}\r\n\r\n\tfunction _withdrawERC20Tokens(\r\n\t\taddress recipient,\r\n\t\tuint256 payAmount,\r\n\t\tIERC20 tokenContract\r\n\t) internal returns (bool success) {\r\n\t\t//Balance check should be done in ERC20 contract transfer fn\r\n\t\ttokenContract.transfer(recipient, payAmount);\r\n\t\temit ERC20Withdrawal(\r\n\t\t\trecipient,\r\n\t\t\tpayAmount,\r\n\t\t\ttokenContract\r\n\t\t);\r\n\t\treturn tokenContract.transfer(recipient, payAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * Function that allows the owner to withdraw all the Ether in the contract\r\n\t * The function can only be called by the owner of the contract as defined by the modifier\r\n\t */\r\n\tfunction payoutEth(\r\n\t\taddress payable recipient\r\n\t) virtual public onlyOwner {\r\n\t\temit EthWithdrawal(\r\n\t\t\trecipient,\r\n\t\t\taddress(this).balance\r\n\t\t);\r\n\t\t(bool success, ) = payable(recipient).call{ value: address(this).balance }(\"\");\r\n\t\trequire(success, \"Failed to send Ether\");\r\n\t}\r\n\r\n\t/**\r\n\t * Function that allows the contract to receive ETH\r\n\t */\r\n\treceive() external payable {}\r\n}\r\n"
    },
    "contracts/Questions.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"./IQuestionsController.sol\";\r\nimport \"./PayableOwnable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\r\n\r\ncontract Questions is PayableOwnable {\r\n\r\n\t/*\r\n\t//One previously considered alternate implementation was to\r\n\t//have a question struct, like this:\r\n\tstruct Option {\r\n\t\tstring text; //up to 140 chars\r\n\t\tuint16 resolutionFraction;\r\n\t\tmapping(address => uint) playerPositions;\r\n\t\tuint optionPool;\r\n\t}\r\n\t//and then include that within the Questions struct, like this:\r\n\tOption[] options; //max length 26\r\n\t//instead of\r\n\tstring[] options; //and other parallel arrays.\r\n\tHowever, attempting to construct such a struct produces the error\r\n\t\"Struct containing a (nested) mapping cannot be constructed.\"\r\n\t//Using an empty state variable like this:\r\n\tmapping(address => uint) emptyMap;\r\n\t//and then in addOptions copying it over like this:\r\n\tmapping(address => uint) storage em = emptyMap;\r\n\t//for use in a constructor like this:\r\n\trows[rowID].options.push(Question({text: options[i]}));\r\n\t//seems like it would risk having any modifications to that mapping\r\n\t//in the new question affect all others copied from the same source.\r\n\t//With the struct strategy, resolution looks a bit different:\r\n\tfor(uint8 i=0; i<resolutionFractions.length; i++) {\r\n\t\trows[rowID].options[i].resolutionFraction = resolutionFractions[i];\r\n\t}\r\n\t*/\r\n\r\n\tstruct Question {\r\n\t\taddress lister;\r\n\t\tuint game; //immutable\r\n\t\tmapping(address => uint) sponsors; // uint is amount sponsored, in base tokens.\r\n\t\tuint totalSponsoredAmount;\r\n\t\tstring[] options; //up to 26 strings each up to 140 chars\r\n\t\tbool[] optionRemoved;\r\n\t\tuint16[] resolutionFractions; //should total 10000 //or should that be -1000*sponsorFractionOfOptionPool?\r\n\t\tmapping(address => uint)[] playerPositions; //denominated in TICKETS\r\n\t\t//mapping(address => uint)[] playerFundsInOptions; //doesn't seem necessary to track\r\n\t\tuint[] optionPoolsTokens; //sum of money (tokens) put in to that\r\n\t\tuint[] optionPoolsTickets; //sum over players\r\n\t\tuint optionPoolsTokensSum; // sum of the above array, but helps accelerate math\r\n\t\t//playerTotalInputs: value is net amount total amount put in, in base tokens.\r\n\t\t//Adjusts only on moving tokens in and out of question, not among options.\r\n\t\t//Can't remove more until resolution, in case it's unresolvable and moves incl. winnings are reversed.\r\n\t\tmapping(address => int) playerTotalInputs; // Could be negative if player had net winnings\r\n\t\tmapping(address => uint) playerFreeBalanceOnQuestion; // Don't set directly! Use _adjustPlayerFreeBalance only.\r\n\t\tuint freeBalanceSum; // Don't set directly! Use _adjustPlayerFreeBalance only.\r\n\t\tbool isResolved; //irreversible\r\n\t\tbool unresolvable; //irreversible\r\n\t\tbool optionsLocked; //reversible\r\n\t\tuint startTime;\r\n\t\tuint endTime; // for autopayout\r\n\t\t// See Games contract for comments about off-chain metadata\r\n\t\tstring imageURI;\r\n\t\tstring title140; // Up to 140 character title\r\n\t\tstring descr500; // Up to 500 character description\r\n\t}\r\n\r\n\tuint immutable MULTIPLIER = 1000000000;\r\n\tuint256 maxUsedID = 0; // 0 is not actually used, but reserved for the undefined/empty reference\r\n\tIQuestionsController controller;\r\n\tmapping(uint256 => Question) rows;\r\n\r\n\tevent Creation(\r\n\t\taddress indexed lister,\r\n\t\tuint indexed newId\r\n\t);\r\n\r\n\tevent ControllerChanged(\r\n\t\tIQuestionsController indexed oldValue,\r\n\t\tIQuestionsController indexed newValue\r\n\t);\r\n\r\n\tevent ListerChanged(\r\n\t\tuint indexed rowID,\r\n\t\taddress indexed oldValue,\r\n\t\taddress indexed newValue\r\n\t);\r\n\r\n\tevent SponsorshipAdded(\r\n\t\tuint indexed rowID,\r\n\t\taddress indexed sponsor,\r\n\t\tuint amountAdded,\r\n\t\tuint totalSponsorshipFromThisSponsor,\r\n\t\tuint totalSponsoredAmount\r\n\t);\r\n\r\n\tevent OptionAdded(\r\n\t\tuint indexed rowID,\r\n\t\tuint optionIndex,\r\n\t\tstring optionsAdded\r\n\t);\r\n\r\n\tevent OptionChanged(\r\n\t\tuint indexed rowID,\r\n\t\tuint8 optionID,\r\n\t\tstring oldText,\r\n\t\tstring newText\r\n\t);\r\n\r\n\tevent OptionRemoved(\r\n\t\tuint indexed rowID,\r\n\t\tuint8 optionID,\r\n\t\tstring oldText\r\n\t);\r\n\r\n\tevent PlayerTotalInputsChanged(\r\n\t\taddress indexed player,\r\n\t\tuint indexed rowID,\r\n\t\tint amountOfChange,\r\n\t\tuint newPlayerTotalInput\r\n\t);\r\n\r\n\tevent PositionChanged(\r\n\t\taddress indexed player,\r\n\t\tuint indexed rowID,\r\n\t\tuint8 optionIndex,\r\n\t\tint amountOfChange,\r\n\t\tuint newPositionForPlayer,\r\n\t\tuint newPoolForOption\r\n\t);\r\n\r\n\tevent Resolved(\r\n\t\tuint indexed rowID,\r\n\t\tbool isUnresolvable,\r\n\t\tuint16[] resolutionFractions\r\n\t);\r\n\r\n\tevent OptionsLockedChanged(\r\n\t\tuint indexed rowID,\r\n\t\tbool oldValue,\r\n\t\tbool newValue\r\n\t);\r\n\r\n\tevent StartTimeChanged(\r\n\t\tuint indexed rowID,\r\n\t\tuint oldValue,\r\n\t\tuint newValue\r\n\t);\r\n\r\n\tevent EndTimeChanged(\r\n\t\tuint indexed rowID,\r\n\t\tuint oldValue,\r\n\t\tuint newValue\r\n\t);\r\n\r\n\tevent ImageURIChanged(\r\n\t\tuint indexed rowID,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\tevent Title140Changed(\r\n\t\tuint indexed rowID,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\tevent Descr500Changed(\r\n\t\tuint indexed rowID,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\terror NotAllowedToListInGame(address attempter); // 'This account is not currently allowed to create a new question in this game.'\r\n\r\n\terror PropertyChangeAttemptByNonLister(address attempter);\r\n\r\n\terror InvalidOptionID(uint rowID, uint8 optionID);\r\n\r\n\tmodifier onlyIfAllowedToList(uint gameID) {\r\n\t\t_checkIsAllowedToList(gameID);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _checkIsAllowedToList(uint gameID) internal view virtual {\r\n\t\tif (!controller.isAllowedToList(gameID, msg.sender)) {\r\n\t\t\trevert PropertyChangeAttemptByNonLister(msg.sender);\r\n\t\t}\r\n\t}\r\n\r\n\tmodifier onlyLister(uint rowID) {\r\n\t\t_checkLister(rowID); //Split out like OpenZeppelin's Ownable contract\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _checkLister(uint rowID) internal view virtual {\r\n\t\tif (rows[rowID].lister != msg.sender) {\r\n\t\t\trevert PropertyChangeAttemptByNonLister(msg.sender);\r\n\t\t}\r\n\t}\r\n\r\n\tmodifier onlyReferee(uint rowID) {\r\n\t\t_checkReferee(rowID); //Split out like OpenZeppelin's Ownable contract\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _checkReferee(uint rowID) internal view virtual {\r\n\t\tif (!controller.isRefereeFor(rows[rowID].game, msg.sender)) {\r\n\t\t\trevert PropertyChangeAttemptByNonLister(msg.sender);\r\n\t\t}\r\n\t}\r\n\r\n\tmodifier onlyIfValidOptionID(uint rowID, uint8 optionID) {\r\n\t\t_checkOptionIDValidity(rowID, optionID); //Split out like OpenZeppelin's Ownable contract\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _checkOptionIDValidity(uint rowID, uint8 optionID) internal view virtual {\r\n\t\tif ((optionID < rows[rowID].options.length) || rows[rowID].optionRemoved[optionID]) {\r\n\t\t\trevert InvalidOptionID(rowID, optionID);\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(\r\n\t\taddress payable initialOwner,\r\n\t\tIQuestionsController initialController\r\n\t)\r\n\t\tPayableOwnable(initialOwner)\r\n\t{\r\n\t\t_changeController(initialController);\r\n\t}\r\n\r\n\tfunction changeController(\r\n\t\tIQuestionsController newController\r\n\t) public onlyOwner {\r\n\t\t_changeController(\r\n\t\t\tnewController\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeController(\r\n\t\tIQuestionsController newController\r\n\t) private {\r\n\t\temit ControllerChanged(\r\n\t\t\tcontroller,\r\n\t\t\tnewController\r\n\t\t);\r\n\t\tcontroller = newController;\r\n\t}\r\n\r\n\tfunction create(\r\n\t\tuint gameID,\r\n\t\taddress lister,\r\n\t\tstring calldata title140,\r\n\t\tstring[] calldata options\r\n\t\t//endTime at default value of 0 here (goes w/game, which might change)\r\n\t\t//startTime at default value of 0 here\r\n\t) public onlyIfAllowedToList(gameID) {\r\n\t\t_create(\r\n\t\t\tgameID,\r\n\t\t\tlister,\r\n\t\t\ttitle140,\r\n\t\t\toptions,\r\n\t\t\t0,\r\n\t\t\t0\r\n\t\t);\r\n\t}\r\n\r\n\tfunction create(\r\n\t\tuint gameID,\r\n\t\taddress lister,\r\n\t\tstring calldata title140,\r\n\t\tstring[] calldata options,\r\n\t\tuint endTime\r\n\t\t//startTime at default value of 0 here\r\n\t) public onlyIfAllowedToList(gameID) {\r\n\t\t_create(\r\n\t\t\tgameID,\r\n\t\t\tlister,\r\n\t\t\ttitle140,\r\n\t\t\toptions,\r\n\t\t\tendTime,\r\n\t\t\t0\r\n\t\t);\r\n\t}\r\n\r\n\tfunction create(\r\n\t\tuint gameID,\r\n\t\taddress lister,\r\n\t\tstring calldata title140,\r\n\t\tstring[] calldata options,\r\n\t\tuint endTime,\r\n\t\tuint startTime\r\n\t) public onlyIfAllowedToList(gameID) {\r\n\t\t_create(\r\n\t\t\tgameID,\r\n\t\t\tlister,\r\n\t\t\ttitle140,\r\n\t\t\toptions,\r\n\t\t\tendTime,\r\n\t\t\tstartTime\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _create(\r\n\t\tuint gameID,\r\n\t\taddress lister,\r\n\t\tstring calldata title140,\r\n\t\tstring[] calldata options,\r\n\t\tuint endTime,\r\n\t\tuint startTime\r\n\t) private {\r\n\t\tmaxUsedID++;\r\n\t\temit Creation(\r\n\t\t\tlister,\r\n\t\t\tmaxUsedID\r\n\t\t);\r\n\t\trows[maxUsedID].game = gameID;\r\n\t\t_changeLister(\r\n\t\t\tmaxUsedID,\r\n\t\t\tlister\r\n\t\t);\r\n\t\t_changeTitle140(\r\n\t\t\tmaxUsedID,\r\n\t\t\ttitle140\r\n\t\t);\r\n\t\t_addOptions(\r\n\t\t\tmaxUsedID,\r\n\t\t\toptions\r\n\t\t);\r\n\t\t_changeEndTime(\r\n\t\t\tmaxUsedID,\r\n\t\t\tendTime\r\n\t\t);\r\n\t\t_changeStartTime(\r\n\t\t\tmaxUsedID,\r\n\t\t\tstartTime\r\n\t\t);\r\n\t}\r\n\r\n\tfunction changeLister(\r\n\t\tuint rowID,\r\n\t\taddress newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeLister(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeLister(\r\n\t\tuint rowID,\r\n\t\taddress newValue\r\n\t) private {\r\n\t\temit ListerChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].lister,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].lister = newValue;\r\n\t}\r\n\r\n\tfunction addSponsorship(\r\n\t\tuint rowID,\r\n\t\tuint amountToAdd,\r\n\t\taddress sponsor\r\n\t) public {\r\n\t\trows[rowID].sponsors[sponsor] += amountToAdd;\r\n\t\trows[rowID].totalSponsoredAmount += amountToAdd;\r\n\t\temit SponsorshipAdded(\r\n\t\t\trowID,\r\n\t\t\tsponsor,\r\n\t\t\tamountToAdd,\r\n\t\t\trows[rowID].sponsors[sponsor],\r\n\t\t\trows[rowID].totalSponsoredAmount\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tcontroller.gameToken(rows[rowID].game).transferFrom(msg.sender, address(controller), amountToAdd),\r\n\t\t\t'Sponsorship addition failed.'\r\n\t\t);\r\n\t}\r\n\r\n\tfunction addOptions(\r\n\t\tuint rowID,\r\n\t\tstring[] calldata options\r\n\t) public onlyLister(rowID) {\r\n\t\t//TODO: Add require conditions here\r\n\t\t_addOptions(\r\n\t\t\trowID,\r\n\t\t\toptions\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _addOptions(\r\n\t\tuint rowID,\r\n\t\tstring[] calldata options\r\n\t) private {\r\n\t\t//DOES allow duplicates but not empty strings\r\n\t\tfor(uint i = 0; i<options.length; i++) {\r\n\t\t\tif(rows[rowID].options.length >= 26) {\r\n\t\t\t\trevert('There is a maximum of 26 options per question.');\r\n\t\t\t}\r\n\t\t\tif(bytes(options[i]).length > 0) {\r\n\t\t\t\temit OptionAdded(\r\n\t\t\t\t\trowID,\r\n\t\t\t\t\trows[rowID].options.length,\r\n\t\t\t\t\toptions[i]\r\n\t\t\t\t);\r\n\t\t\t\trows[rowID].options.push(options[i]);\r\n\t\t\t\trows[rowID].optionPoolsTokens.push(0);\r\n\t\t\t\trows[rowID].optionPoolsTickets.push(0);\r\n\t\t\t\trows[rowID].playerPositions.push({});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction changeOption(\r\n\t\tuint rowID,\r\n\t\tuint8 optionID,\r\n\t\tstring calldata newText\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeOption(\r\n\t\t\trowID,\r\n\t\t\toptionID,\r\n\t\t\tnewText\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeOption(\r\n\t\tuint rowID,\r\n\t\tuint8 optionID,\r\n\t\tstring calldata newText\r\n\t) private onlyIfValidOptionID(rowID, optionID) {\r\n\t\t//DOES allow duplicates but not empty strings\r\n\t\t//Empty strings are an error here but just silently ignored when adding an array of options.\r\n\t\trequire(bytes(newText).length > 0, 'Empty-string options are not allowed.');\r\n\t\temit OptionChanged(\r\n\t\t\trowID,\r\n\t\t\toptionID,\r\n\t\t\trows[rowID].options[optionID],\r\n\t\t\tnewText\r\n\t\t);\r\n\t\trows[rowID].options[optionID] = newText;\r\n\t}\r\n\r\n\tfunction removeOption(\r\n\t\tuint rowID,\r\n\t\tuint8 optionID\r\n\t) public onlyLister(rowID) {\r\n\t\t_removeOption(\r\n\t\t\trowID,\r\n\t\t\toptionID\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _removeOption(\r\n\t\tuint rowID,\r\n\t\tuint8 optionID\r\n\t) private onlyIfValidOptionID(rowID, optionID) {\r\n\t\temit OptionRemoved(\r\n\t\t\trowID,\r\n\t\t\toptionID,\r\n\t\t\trows[rowID].options[optionID]\r\n\t\t);\r\n\t\trequire(\r\n\t\t\trows[rowID].optionPoolsTickets[optionID] <= 0,\r\n\t\t\t'Cannot delete an option when players have an open position in it.'\r\n\t\t);\r\n\t\trows[rowID].optionRemoved[optionID] = true;\r\n\t}\r\n\r\n\tfunction changeStartTime(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeStartTime(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeStartTime(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) private {\r\n\t\temit StartTimeChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].startTime,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].startTime = newValue;\r\n\t}\r\n\r\n\tfunction changeEndTime(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeEndTime(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeEndTime(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) private {\r\n\t\temit EndTimeChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].endTime,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].endTime = newValue;\r\n\t}\r\n\r\n\tfunction markUnresolvableByLister(\r\n\t\tuint rowID\r\n\t) public onlyLister(rowID) {\r\n\t\t_markUnresolvable(\r\n\t\t\trowID\r\n\t\t);\r\n\t}\r\n\r\n\tfunction markUnresolvableByReferee(\r\n\t\tuint rowID\r\n\t) public onlyReferee(rowID) {\r\n\t\t_markUnresolvable(\r\n\t\t\trowID\r\n\t\t);\r\n\t}\r\n\r\n\t// TODO: Add fn allowing referees in aggregate to mark unresolvable\r\n\r\n\t//Solidity can't figure out the type when passing [] inline\r\n\t//and there doesn't seem to be another valid casting strategy.\r\n\t//See https://github.com/ethereum/solidity/issues/12401\r\n\tfunction getEmptyUint16Array() private pure returns(uint16[] memory) {}\r\n\r\n\tfunction _markUnresolvable(\r\n\t\tuint rowID\r\n\t) private {\r\n\t\temit Resolved(\r\n\t\t\trowID,\r\n\t\t\ttrue,\r\n\t\t\tgetEmptyUint16Array()\r\n\t\t);\r\n\t\trows[rowID].unresolvable = true;\r\n\t\t//TODO: There's more to do here! Joint private fn shared with _resolve().\r\n\t}\r\n\r\n\tfunction freeze(\r\n\t\tuint rowID\r\n\t) public onlyReferee(rowID) {\r\n\t\t_freeze(\r\n\t\t\trowID\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _freeze(\r\n\t\tuint rowID\r\n\t) private {\r\n\t\tuint16[] memory resolutionFractions = new uint16[](rows[rowID].options.length);\r\n\t\tfor(uint i=0; i<rows[rowID].options.length; i++) {\r\n\t\t\tresolutionFractions[i] = uint16(10000*rows[rowID].optionPoolsTokens[i] / rows[rowID].optionPoolsTokensSum);\r\n\t\t}\r\n\t\t_resolve(\r\n\t\t\trowID,\r\n\t\t\tresolutionFractions\r\n\t\t);\r\n\t}\r\n\r\n\tfunction resolveToOption(\r\n\t\tuint rowID,\r\n\t\tuint8 optionID\r\n\t) public onlyReferee(rowID) onlyIfValidOptionID(rowID, optionID) {\r\n\t\t_resolveToOption(\r\n\t\t\trowID,\r\n\t\t\toptionID\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _resolveToOption(\r\n\t\tuint rowID,\r\n\t\tuint8 optionID\r\n\t) private {\r\n\t\tuint16[] memory resolutionFractions = new uint16[](rows[rowID].options.length);\r\n\t\tresolutionFractions[optionID] = 10000;\r\n\t\t_resolve(\r\n\t\t\trowID,\r\n\t\t\tresolutionFractions\r\n\t\t);\r\n\t}\r\n\r\n\tfunction resolve(\r\n\t\tuint rowID,\r\n\t\tuint16[] memory resolutionFractions\r\n\t) public onlyReferee(rowID) {\r\n\t\t_resolve(\r\n\t\t\trowID,\r\n\t\t\tresolutionFractions\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _resolve(\r\n\t\tuint rowID,\r\n\t\tuint16[] memory resolutionFractions\r\n\t) private {\r\n\t\trequire(resolutionFractions.length == rows[rowID].options.length, 'Invalid length of resolutionFractions parameter.');\r\n\t\tuint16 sum = 0;\r\n\t\tfor(uint8 i=0; i<resolutionFractions.length; i++) {\r\n\t\t\trequire(!(rows[rowID].optionRemoved[i] && resolutionFractions[i] > 0), 'ResolutionFractions specifies nonzero value for removed option.');\r\n\t\t\tsum += resolutionFractions[i];\r\n\t\t}\r\n\t\trequire(sum == 10000, 'Invalid sum of resolutionFractions.');\r\n\t\temit Resolved(\r\n\t\t\trowID,\r\n\t\t\tfalse,\r\n\t\t\tresolutionFractions\r\n\t\t);\r\n\t\trows[rowID].isResolved = true;\r\n\t\trows[rowID].resolutionFractions = resolutionFractions;\r\n\t}\r\n\r\n\tfunction changeOptionsLocked(\r\n\t\tuint rowID,\r\n\t\tbool newValue\r\n\t) public onlyReferee(rowID) {\r\n\t\t_changeOptionsLocked(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeOptionsLocked(\r\n\t\tuint rowID,\r\n\t\tbool newValue\r\n\t) private {\r\n\t\temit OptionsLockedChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].optionsLocked,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].optionsLocked = newValue;\r\n\t}\r\n\r\n\tfunction changeImageURI(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeImageURI(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeImageURI(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) private {\r\n\t\temit ImageURIChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].imageURI,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].imageURI = newValue;\r\n\t}\r\n\r\n\tfunction changeTitle140(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeTitle140(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeTitle140(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) private {\r\n\t\temit Title140Changed(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].title140,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].title140 = newValue;\r\n\t}\r\n\r\n\tfunction changeDescr500(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeDescr500(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeDescr500(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) private {\r\n\t\temit Descr500Changed(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].descr500,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].descr500 = newValue;\r\n\t}\r\n\r\n\tfunction hasResolved(\r\n\t\tuint rowID\r\n\t) public view returns (bool) {\r\n\t\treturn rows[rowID].isResolved || rows[rowID].unresolvable;\r\n\t}\r\n\r\n\tfunction moveTokensIntoOrOutOfQuestionFreeBalance(\r\n\t\tuint rowID,\r\n\t\tint amount\r\n\t) public {\r\n\t\tif(amount == 0) {\r\n\t\t\t//do nothing.\r\n\t\t\treturn;\r\n\t\t} else if(amount > 0) { //Depositing into question free balance\r\n\t\t\trequire(\r\n\t\t\t\t!hasResolved(rowID),\r\n\t\t\t\t'Cannot deposit outside funds into a resolved question; you can only withdraw.'\r\n\t\t\t);\r\n\t\t\trequire(\r\n\t\t\t\trows[rowID].playerTotalInputs[msg.sender] >= 0,\r\n\t\t\t\t'Contract bug: player was allowed to withdraw more than they put in on question before resolution!'\r\n\t\t\t);\r\n\t\t\trequire(\r\n\t\t\t\t//Cast at start of next line is valid due to the immediately preceding require statement\r\n\t\t\t\tuint(rows[rowID].playerTotalInputs[msg.sender]) <= controller.maxQuestionBid(rows[rowID].game),\r\n\t\t\t\t'Contract bug: player was allowed to exceed maximum bid on question!'\r\n\t\t\t);\r\n\t\t\tuint roomLeftToMaxQuestionBid =\r\n\t\t\t\tcontroller.maxQuestionBid(rows[rowID].game) -\r\n\t\t\t\tuint(rows[rowID].playerTotalInputs[msg.sender]) //valid cast due to the contract bug check in the require statement above\r\n\t\t\t;\r\n\t\t\t//Cap total amount deposited to MaxQuestionBid:\r\n\t\t\tuint cappedAmount = Math.min(\r\n\t\t\t\tuint(amount), //valid cast due to being in if(amount>0) conditional block.\r\n\t\t\t\troomLeftToMaxQuestionBid\r\n\t\t\t);\r\n\t\t\t//cappedAmount is guaranteed to be within the positive int range because it is the lesser of:\r\n\t\t\t//amount, a positive (within the if amount>0 block) value within the int range (it's an int parameter)\r\n\t\t\t//maxQuestionBid for the game, which is guaranteed within the int range by the controller interface\r\n\t\t\tamount = int(cappedAmount);\r\n\t\t\trequire(controller.gameToken(rows[rowID].game).transferFrom(msg.sender, address(this), uint256(amount)), 'Token transfer failed.');\r\n\t\t} else { //Withdrawal from question free balance\r\n\t\t\tif(!rows[rowID].isResolved) {\r\n\t\t\t\t//unresolvable, or unknown if it's resolvable:\r\n\t\t\t\t//Cap withdrawal to amount that was put in.\r\n\t\t\t\trequire(rows[rowID].playerTotalInputs[msg.sender] >= 0, 'Contract bug: player was allowed to withdraw more than they put in on question later found unresolvable!');\r\n\t\t\t\tuint cappedPositiveAmount = Math.min(\r\n\t\t\t\t\tuint(-1*amount), //valid cast due to being in an (amount < 0) conditional block.\r\n\t\t\t\t\tuint(rows[rowID].playerTotalInputs[msg.sender]) //valid cast due to require statement above\r\n\t\t\t\t);\r\n\t\t\t\t//cappedPositiveAmount is guaranteed to be within the positive int range, as the result of a min function between:\r\n\t\t\t\t//The param \"amount\" which is guaranteed to be in the int range (it's incoming as an int type)\r\n\t\t\t\t//and is necessarily negative in this conditional block, with the sign flipped by the -1*.\r\n\t\t\t\t//The other operator to the min function is a uint so it's guaranteed positive, and if it's beyond the int range\r\n\t\t\t\t//then it definitely won't be the minimum of the two arguments so it won't be the result of the min function.\r\n\t\t\t\tamount = -1*int(cappedPositiveAmount);\r\n\t\t\t}\r\n\t\t\tif(!rows[rowID].unresolvable) {\r\n\t\t\t\t//Cap withdrawal to free balance on question.\r\n\t\t\t\t//This cap does not apply if it's deemed unresolvable;\r\n\t\t\t\t//in that case the cap is the net amount put into the question.\r\n\t\t\t\tuint cappedPositiveAmount = Math.min(\r\n\t\t\t\t\tuint(-1*amount), //valid cast due to being in an (amount < 0) conditional block.\r\n\t\t\t\t\trows[rowID].playerFreeBalanceOnQuestion[msg.sender]\r\n\t\t\t\t);\r\n\t\t\t\t//Same comments as above\r\n\t\t\t\tamount = -1*int(cappedPositiveAmount);\r\n\t\t\t}\r\n\t\t\t//An extra safety check to limit withdrawals.\r\n\t\t\t//This shouldn't be needed, but it's a guardrail until a more throrough\r\n\t\t\t//tokenomics review can be conducted.\r\n\t\t\tuint cappedPositiveAmount = Math.min(\r\n\t\t\t\tuint(-1*amount),\r\n\t\t\t\trows[rowID].freeBalanceSum\r\n\t\t\t);\r\n\t\t\t//Same comments as above\r\n\t\t\tamount = -1*int(cappedPositiveAmount);\r\n\t\t\trequire(controller.gameToken(rows[rowID].game).transfer(msg.sender, uint256(-1*amount)), 'Token transfer failed.');\r\n\t\t}\r\n\t\t//TODO: Get better about checks-effects-interactions here\r\n\t\trows[rowID].playerTotalInputs[msg.sender] += amount;\r\n\t\t_adjustPlayerFreeBalance(rowID, msg.sender, amount);\r\n\t}\r\n\r\n\tfunction _adjustPlayerFreeBalance(\r\n\t\tuint rowID,\r\n\t\taddress player,\r\n\t\tint amountToIncreaseFreeBalanceBy\r\n\t) private {\r\n\t\tif(amountToIncreaseFreeBalanceBy >= 0) {\r\n\t\t\t//This fn exists to make sure these two state variables are always changed together:\r\n\t\t\trows[rowID].playerFreeBalanceOnQuestion[msg.sender] =\r\n\t\t\t\trows[rowID].playerFreeBalanceOnQuestion[msg.sender] +\r\n\t\t\t\tuint(amountToIncreaseFreeBalanceBy) //valid cast in this conditional block\r\n\t\t\t;\r\n\t\t\trows[rowID].freeBalanceSum =\r\n\t\t\t\trows[rowID].freeBalanceSum +\r\n\t\t\t\tuint(amountToIncreaseFreeBalanceBy) //valid cast in this conditional block\r\n\t\t\t;\r\n\t\t} else {\r\n\t\t\trequire(\r\n\t\t\t\t(\r\n\t\t\t\t\tuint(-1*amountToIncreaseFreeBalanceBy) < //valid cast in this conditional block\r\n\t\t\t\t\trows[rowID].playerFreeBalanceOnQuestion[msg.sender]\r\n\t\t\t\t),\r\n\t\t\t\t\"Player free balance cannot go negative.\"\r\n\t\t\t);\r\n\t\t\trequire(\r\n\t\t\t\t(\r\n\t\t\t\t\tuint(-1*amountToIncreaseFreeBalanceBy) < //valid cast in this conditional block\r\n\t\t\t\t\trows[rowID].freeBalanceSum\r\n\t\t\t\t),\r\n\t\t\t\t\"Contract bug: Total free balance cannot go negative.\"\r\n\t\t\t);\r\n\t\t\t//This fn exists to make sure these two state variables are always changed together:\r\n\t\t\trows[rowID].playerFreeBalanceOnQuestion[msg.sender] =\r\n\t\t\t\trows[rowID].playerFreeBalanceOnQuestion[msg.sender] -\r\n\t\t\t\tuint(-1*amountToIncreaseFreeBalanceBy) //valid cast in this conditional block\r\n\t\t\t;\r\n\t\t\trows[rowID].freeBalanceSum =\r\n\t\t\t\trows[rowID].freeBalanceSum -\r\n\t\t\t\tuint(-1*amountToIncreaseFreeBalanceBy) //valid cast in this conditional block\r\n\t\t\t;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction transferIntoOption(\r\n\t\tuint rowID,\r\n\t\tuint8 optionID,\r\n\t\tuint amountMovingIntoOption\r\n\t) public onlyIfValidOptionID(rowID, optionID) {\r\n\t\trequire(!(rows[rowID].isResolved || rows[rowID].unresolvable), 'Question is resolved; cannot add to option position (only withdraw).');\r\n\t\trequire(amountMovingIntoOption < 2**255, 'Amount moving in exceeds application-wide limit. Try multiple smaller moves.');\r\n\t\trequire(!rows[rowID].optionsLocked, 'Options are locked; cannot change position at present.');\r\n\t\t//Cap amount moving in to a player's free balance:\r\n\t\tamountMovingIntoOption = Math.min(amountMovingIntoOption, rows[rowID].playerFreeBalanceOnQuestion[msg.sender]);\r\n\t\t//An extra safety check that shouldn't be needed,\r\n\t\t//but it's a guardrail until a more throrough\r\n\t\t//tokenomics review can be conducted.\r\n\t\tamountMovingIntoOption = Math.min(amountMovingIntoOption, rows[rowID].freeBalanceSum);\r\n\t\trequire(amountMovingIntoOption > 0, 'Must move positive amount into option; withdrawal is a different function.');\r\n\t\tuint tickets = amountMovingIntoOption; //the default\r\n\t\tif(rows[rowID].optionPoolsTokens[optionID] > 0) {\r\n\t\t\t//There are already other players in the pool.\r\n\t\t\t//Compute the cost of the tickets to determine how many tickets the player gets.\r\n\t\t}\r\n\r\n\t\t//NO EFFECT ON rows[rowID].playerTotalInputs[msg.sender]\r\n\t\t_adjustPlayerFreeBalance(rowID, msg.sender, -1*int(amountMovingIntoOption)); //cast valid due to range check above\r\n\t\trows[rowID].optionPoolsTokens[optionID] += amountMovingIntoOption;\r\n\t\trows[rowID].optionPoolsTokensSum += amountMovingIntoOption;\r\n\t\trows[rowID].playerPositions[optionID][msg.sender] += tickets;\r\n\t\trows[rowID].optionPoolsTickets[optionID] += tickets;\r\n\t}\r\n\r\n/*\r\n\tfunction transferOutOfOption(\r\n\t\tuint rowID,\r\n\t\tuint8 optionID,\r\n\t\tuint ticketCountToRedeem\r\n\t) public onlyIfValidOptionID(rowID, optionID) {\r\n\t\trequire(!rows[rowID].unresolvable, 'Question is resolved; no need or ability to transfer out of options; withdraw directly from question.');\r\n\t\trequire(!rows[rowID].optionsLocked, 'Options are locked; cannot change position at present.');\r\n\t\t//Cap to the number of tickets the player has on that option.\r\n\t\tticketCountToRedeem = Math.min(ticketCountToRedeem, rows[rowID].playerPositions[optionID][msg.sender]);\r\n\t\t//TODO: Remove guardrail in next line after more careful tokenomics audit\r\n\t\tticketCountToRedeem = Math.min(ticketCountToRedeem, rows[rowID].optionPoolsTickets[optionID]);\r\n\t\t//This check is conceptually there & helpful but not really needed in live code, as\r\n\t\t//it wastes gas in the common case without really saving someone in the exception.\r\n\t\t//It is left in for now as a guardrail awaiting a more carefult tokenomics audit.\r\n\t\trequire(ticketCountToRedeem > 0, 'Must redeem positive number of tokens.');\r\n\r\n\t\t//Now compute the value of those tickets.\r\n\t\t//uint totalValueInOption;\r\n\t\tuint redemptionValue;\r\n\t\tif(rows[rowID].isResolved) {\r\n\t\t\tuint totalValueInOption = rows[rowID].optionPoolsTokensSum * rows[rowID].resolutionFractions[optionID] / 10000;\r\n\t\t\tuint perTicketValue = totalValueInOption / rows[rowID].optionPoolsTickets[optionID];\r\n\t\t\tredemptionValue = perTicketValue * ticketCountToRedeem;\r\n\t\t} else {\r\n\t\t\tuint totalValueInOptionBeforeWithdrawal = (MULTIPLIER * rows[rowID].optionPoolsTokens[optionID] / rows[rowID].optionPoolsTokensSum) / MULTIPLIER;\r\n\t\t\t//uint totalTicketsInOptionAfterWithdrawal = rows[rowID].optionPoolsTickets[optionID] - ticketCountToRedeem; //note: might be 0!\r\n\t\t\t//uint multipliedUpFractionOfTicketsLeftAfter = MULTIPLIER * totalTicketsInOptionAfterWithdrawal / rows[rowID].optionPoolsTickets[optionID]; //might be 0\r\n\t\t\tuint multipliedUpFractionOfOptionValueToRedeem = MULTIPLIER * (ticketCountToRedeem) / (rows[rowID].optionPoolsTickets[optionID]);\r\n\t\t\tredemptionValue = (totalValueInOptionBeforeWithdrawal * multipliedUpFractionOfOptionValueToRedeem) / MULTIPLIER;\r\n\t\t}\r\n\t\trequire(redemptionValue > 0, 'Must move positive amount out of option; deposit into option is a different function.');\r\n\r\n\t\t//TODO: Get better about checks-effects-interactions here\r\n\t\t//NO EFFECT ON rows[rowID].playerTotalInputs[msg.sender]\r\n\t\trows[rowID].playerPositions[optionID][msg.sender] -= ticketCountToRedeem;\r\n\t\trows[rowID].optionPoolsTickets[optionID] -= ticketCountToRedeem;\r\n\t\t_adjustPlayerFreeBalance(rowID, msg.sender, redemptionValue);\r\n\t\trows[rowID].optionPoolsTokens[optionID] -= redemptionValue;\r\n\t\trows[rowID].optionPoolsTokensSum -= redemptionValue;\r\n\t}\r\n*/\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}