{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/Games.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"./IGamesController.sol\";\r\nimport \"./PayableOwnable.sol\";\r\n\r\ncontract Games is PayableOwnable {\r\n\r\n\tstruct Game {\r\n\t\taddress lister;\r\n\t\tmapping(address => uint) sponsors; // uint is amount sponsored, in base tokens.\r\n\t\tuint totalSponsoredAmount;\r\n\t\tuint checkInStart;\r\n\t\tuint endTime; // for autopayout\r\n\t\tuint locationID; // supports map search in the future\r\n\t\taddress[] referees; //accounts who can resolve or cancel a question, possibly also account => Boolean mapping and refCount uint.\r\n\t\tIERC20 gameToken; // The token address exchangeable 1:1 for tokens in the game; auto payout in that token after the game end time\r\n\t\tbool checkInRequired;\r\n\t\tbool openToAnyAsker;\r\n\t\tuint24 sponsorFractionOfOptionPool; // A percentage (e.g. 2 for 2%) * 10^5; canâ€™t be changed after CheckInStart\r\n\t\tuint maxQuestionBid; // in token count per question per player.\r\n\t\tmapping (address => int8) askerApprovals; //+1 for whitelist (only attened to if required), -1 for blacklist (though beware Sybils)\r\n\t\t// Some of the information could go into an off-chain metadata file,\r\n\t\t// with just one URL here.\r\n\t\t// Putting the image URI in the metadata file can be done,\r\n\t\t// but would slow down pageload especially on the frequently accessed event list page\r\n\t\t// due to an extra server lookup and roundtrip to get the image URL and then the image content.\r\n\t\t// If there is a large volume of metadata, off-chain is better,\r\n\t\t// but (a) that adds unnecessary complexity to the architecture\r\n\t\t// (for images, there's more argument favoring necessity)\r\n\t\t// and (b) on-chain events with events fired on every change help support server-side render caching\r\n\t\t// with reliable cache invalidation when data changes.\r\n\t\tstring imageURI;\r\n\t\tstring eventURI;\r\n\t\tstring title140; // Up to 140 character title\r\n\t\tstring descr500; // Up to 500 character description\r\n\t\tuint listStart; // for example, the published start time of a sports game.\r\n\t\tuint listEnd;\r\n\t}\r\n\r\n\tuint256 maxUsedID = 0; // 0 is not actually used, but reserved for the undefined/empty reference\r\n\tIGamesController controller;\r\n\tmapping(uint256 => Game) rows;\r\n\r\n\tevent Creation(\r\n\t\taddress indexed lister,\r\n\t\tuint indexed newId\r\n\t);\r\n\r\n\tevent ControllerChanged(\r\n\t\tIGamesController indexed oldValue,\r\n\t\tIGamesController indexed newValue\r\n\t);\r\n\r\n\tevent ListerChanged(\r\n\t\tuint indexed rowID,\r\n\t\taddress indexed oldValue,\r\n\t\taddress indexed newValue\r\n\t);\r\n\r\n\tevent SponsorshipAdded(\r\n\t\tuint indexed rowID,\r\n\t\taddress indexed sponsor,\r\n\t\tuint amountAdded,\r\n\t\tuint totalSponsorshipFromThisSponsor,\r\n\t\tuint totalSponsoredAmount\r\n\t);\r\n\r\n\tevent CheckInStartChanged(\r\n\t\tuint indexed rowID,\r\n\t\tuint oldValue,\r\n\t\tuint newValue\r\n\t);\r\n\r\n\tevent EndTimeChanged(\r\n\t\tuint indexed rowID,\r\n\t\tuint oldValue,\r\n\t\tuint newValue\r\n\t);\r\n\r\n\tevent LocationIDChanged(\r\n\t\tuint indexed rowID,\r\n\t\tuint oldValue,\r\n\t\tuint newValue\r\n\t);\r\n\r\n\tevent RefereeAdded(\r\n\t\tuint indexed rowID,\r\n\t\taddress indexed referee\r\n\t);\r\n\r\n\tevent RefereeRemoved(\r\n\t\tuint indexed rowID,\r\n\t\taddress indexed referee\r\n\t);\r\n\r\n\tevent GameTokenChanged(\r\n\t\tuint indexed rowID,\r\n\t\tIERC20 oldValue,\r\n\t\tIERC20 newValue\r\n\t);\r\n\r\n\tevent CheckInRequiredChanged(\r\n\t\tuint indexed rowID,\r\n\t\tbool oldValue,\r\n\t\tbool newValue\r\n\t);\r\n\r\n\tevent OpenToAnyAskerChanged(\r\n\t\tuint indexed rowID,\r\n\t\tbool oldValue,\r\n\t\tbool newValue\r\n\t);\r\n\r\n\tevent SponsorFractionOfOptionPoolChanged(\r\n\t\tuint indexed rowID,\r\n\t\tuint24 oldValue,\r\n\t\tuint24 newValue\r\n\t);\r\n\r\n\tevent MaxQuestionBidChanged(\r\n\t\tuint indexed rowID,\r\n\t\tuint oldValue,\r\n\t\tuint newValue\r\n\t);\r\n\r\n\tevent AskerApprovalChanged(\r\n\t\tuint indexed rowID,\r\n\t\taddress indexed asker,\r\n\t\tint8 oldValue,\r\n\t\tint8 newValue\r\n\t);\r\n\r\n\tevent ImageURIChanged(\r\n\t\tuint indexed rowID,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\tevent EventURIChanged(\r\n\t\tuint indexed rowID,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\tevent Title140Changed(\r\n\t\tuint indexed rowID,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\tevent Descr500Changed(\r\n\t\tuint indexed rowID,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\tevent ListStartChanged(\r\n\t\tuint indexed rowID,\r\n\t\tuint oldValue,\r\n\t\tuint newValue\r\n\t);\r\n\r\n\tevent ListEndChanged(\r\n\t\tuint indexed rowID,\r\n\t\tuint oldValue,\r\n\t\tuint newValue\r\n\t);\r\n\r\n\terror PropertyChangeAttemptByNonLister(address attempter);\r\n\r\n\tmodifier onlyLister(uint rowID) {\r\n\t\t_checkLister(rowID); //Split out like OpenZeppelin's Ownable contract\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _checkLister(uint rowID) internal view virtual {\r\n\t\tif (rows[rowID].lister != msg.sender) {\r\n\t\t\trevert PropertyChangeAttemptByNonLister(_msgSender());\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(\r\n\t\taddress payable initialOwner,\r\n\t\tIGamesController initialController\r\n\t)\r\n\t\tPayableOwnable(initialOwner)\r\n\t{\r\n\t\t_changeController(initialController);\r\n\t}\r\n\r\n\tfunction changeController(\r\n\t\tIGamesController newController\r\n\t) public onlyOwner {\r\n\t\t_changeController(\r\n\t\t\tnewController\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeController(\r\n\t\tIGamesController newController\r\n\t) private {\r\n\t\temit ControllerChanged(\r\n\t\t\tcontroller,\r\n\t\t\tnewController\r\n\t\t);\r\n\t\tcontroller = newController;\r\n\t}\r\n\r\n\tfunction create(\r\n\t\taddress lister\r\n\t) public {\r\n\t\trequire(\r\n\t\t\tcontroller.isAllowedToList(lister),\r\n\t\t\t'This account is not currently allowed to create a new game.'\r\n\t\t);\r\n\t\tmaxUsedID++;\r\n\t\temit Creation(\r\n\t\t\tlister,\r\n\t\t\tmaxUsedID\r\n\t\t);\r\n\t\t_changeLister(\r\n\t\t\tmaxUsedID,\r\n\t\t\tlister\r\n\t\t);\r\n\t\t_changeGameToken(\r\n\t\t\tmaxUsedID,\r\n\t\t\tcontroller.baseToken()\r\n\t\t);\r\n\t\t_changeSponsorFractionOfOptionPool(\r\n\t\t\tmaxUsedID,\r\n\t\t\tcontroller.defaultSponsorFractionOfOptionPool()\r\n\t\t);\r\n\t\t_changeMaxQuestionBid(\r\n\t\t\tmaxUsedID,\r\n\t\t\tcontroller.defaultMaxQuestionBid()\r\n\t\t);\r\n\t}\r\n\r\n\tfunction changeLister(\r\n\t\tuint rowID,\r\n\t\taddress newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeLister(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeLister(\r\n\t\tuint rowID,\r\n\t\taddress newValue\r\n\t) private {\r\n\t\temit ListerChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].lister,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].lister = newValue;\r\n\t}\r\n\r\n\tfunction addSponsorship(\r\n\t\tuint rowID,\r\n\t\tuint amountToAdd,\r\n\t\taddress sponsor\r\n\t) public {\r\n\t\trows[rowID].sponsors[sponsor] += amountToAdd;\r\n\t\trows[rowID].totalSponsoredAmount += amountToAdd;\r\n\t\temit SponsorshipAdded(\r\n\t\t\trowID,\r\n\t\t\tsponsor,\r\n\t\t\tamountToAdd,\r\n\t\t\trows[rowID].sponsors[sponsor],\r\n\t\t\trows[rowID].totalSponsoredAmount\r\n\t\t);\r\n\t\trequire(\r\n\t\t\trows[rowID].gameToken.transferFrom(msg.sender, address(controller), amountToAdd),\r\n\t\t\t'Sponsorship addition failed.'\r\n\t\t);\r\n\t}\r\n\r\n\tfunction changeCheckInStart(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeCheckInStart(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeCheckInStart(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) private {\r\n\t\temit CheckInStartChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].checkInStart,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].checkInStart = newValue;\r\n\t}\r\n\r\n\tfunction changeEndTime(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeEndTime(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeEndTime(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) private {\r\n\t\temit EndTimeChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].endTime,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].endTime = newValue;\r\n\t}\r\n\r\n\tfunction changeLocationID(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeLocationID(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeLocationID(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) private {\r\n\t\temit LocationIDChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].locationID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].locationID = newValue;\r\n\t}\r\n\r\n\tfunction addReferee(\r\n\t\tuint rowID,\r\n\t\taddress referee\r\n\t) public onlyLister(rowID) {\r\n\t\t_addReferee(\r\n\t\t\trowID,\r\n\t\t\treferee\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _addReferee(\r\n\t\tuint rowID,\r\n\t\taddress referee\r\n\t) private {\r\n\t\tbool found = false;\r\n\t\tfor(uint i = 0; i<rows[rowID].referees.length; i++) {\r\n\t\t\tif(rows[rowID].referees[i] == referee) {\r\n\t\t\t\tfound = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!found) {\r\n\t\t\trows[rowID].referees.push(referee);\r\n\t\t\temit RefereeAdded(\r\n\t\t\t\trowID,\r\n\t\t\t\treferee\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction removeReferee(\r\n\t\tuint rowID,\r\n\t\taddress referee\r\n\t) public onlyLister(rowID) {\r\n\t\t_removeReferee(\r\n\t\t\trowID,\r\n\t\t\treferee\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _removeReferee(\r\n\t\tuint rowID,\r\n\t\taddress referee\r\n\t) private {\r\n\t\tbool found = false;\r\n\t\tuint foundAt = 0;\r\n\t\tfor(uint i = 0; i<rows[rowID].referees.length; i++) {\r\n\t\t\tif(rows[rowID].referees[i] == referee) {\r\n\t\t\t\tfound = true;\r\n\t\t\t\tfoundAt = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(found) {\r\n\t\t\tif(foundAt < rows[rowID].referees.length-1) {\r\n\t\t\t\t//if not the last element in the array, move the last element into the place being vacated\r\n\t\t\t\trows[rowID].referees[foundAt] = rows[rowID].referees[rows[rowID].referees.length-1];\r\n\t\t\t}\r\n\t\t\t//Then drop the last element\r\n\t\t\trows[rowID].referees.pop();\r\n\t\t\temit RefereeRemoved(\r\n\t\t\t\trowID,\r\n\t\t\t\treferee\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t/* TODO: Work through all the implications\r\n\t* of allowing a change to the game token\r\n\t* before enabling this function.\r\n\tfunction changeGameToken(\r\n\t\tuint rowID,\r\n\t\tIERC20 newToken\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeGameToken(\r\n\t\t\trowID,\r\n\t\t\tnewToken\r\n\t\t);\r\n\t}\r\n\t*/\r\n\r\n\tfunction _changeGameToken(\r\n\t\tuint rowID,\r\n\t\tIERC20 newToken\r\n\t) private {\r\n\t\temit GameTokenChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].gameToken,\r\n\t\t\tnewToken\r\n\t\t);\r\n\t\trows[rowID].gameToken = newToken;\r\n\t}\r\n\r\n\tfunction changeCheckInRequired(\r\n\t\tuint rowID,\r\n\t\tbool newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeCheckInRequired(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeCheckInRequired(\r\n\t\tuint rowID,\r\n\t\tbool newValue\r\n\t) private {\r\n\t\temit CheckInRequiredChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].checkInRequired,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].checkInRequired = newValue;\r\n\t}\r\n\r\n\tfunction changeOpenToAnyAsker(\r\n\t\tuint rowID,\r\n\t\tbool newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeOpenToAnyAsker(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeOpenToAnyAsker(\r\n\t\tuint rowID,\r\n\t\tbool newValue\r\n\t) private {\r\n\t\temit OpenToAnyAskerChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].openToAnyAsker,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].openToAnyAsker = newValue;\r\n\t}\r\n\r\n\tfunction changeSponsorFractionOfOptionPool(\r\n\t\tuint rowID,\r\n\t\tuint24 newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeSponsorFractionOfOptionPool(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeSponsorFractionOfOptionPool(\r\n\t\tuint rowID,\r\n\t\tuint24 newValue\r\n\t) private {\r\n\t\temit SponsorFractionOfOptionPoolChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].sponsorFractionOfOptionPool,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].sponsorFractionOfOptionPool = newValue;\r\n\t}\r\n\r\n\tfunction changeMaxQuestionBid(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeMaxQuestionBid(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeMaxQuestionBid(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) private {\r\n\t\temit MaxQuestionBidChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].maxQuestionBid,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].maxQuestionBid = newValue;\r\n\t}\r\n\r\n\tfunction changeAskerApproval(\r\n\t\tuint rowID,\r\n\t\taddress asker,\r\n\t\tint8 newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeAskerApproval(\r\n\t\t\trowID,\r\n\t\t\tasker,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeAskerApproval(\r\n\t\tuint rowID,\r\n\t\taddress asker,\r\n\t\tint8 newValue\r\n\t) private {\r\n\t\temit AskerApprovalChanged(\r\n\t\t\trowID,\r\n\t\t\tasker,\r\n\t\t\trows[rowID].askerApprovals[asker],\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].askerApprovals[asker] = newValue;\r\n\t}\r\n\r\n\tfunction changeImageURI(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeImageURI(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeImageURI(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) private {\r\n\t\temit ImageURIChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].imageURI,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].imageURI = newValue;\r\n\t}\r\n\r\n\tfunction changeEventURI(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeEventURI(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeEventURI(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) private {\r\n\t\temit ImageURIChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].eventURI,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].eventURI = newValue;\r\n\t}\r\n\r\n\tfunction changeTitle140(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeTitle140(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeTitle140(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) private {\r\n\t\temit Title140Changed(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].title140,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].title140 = newValue;\r\n\t}\r\n\r\n\tfunction changeDescr500(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeDescr500(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeDescr500(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) private {\r\n\t\temit Descr500Changed(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].descr500,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].descr500 = newValue;\r\n\t}\r\n\r\n\tfunction changeListStart(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeListStart(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeListStart(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) private {\r\n\t\temit ListStartChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].listStart,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].listStart = newValue;\r\n\t}\r\n\r\n\tfunction changeListEnd(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeListEnd(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeListEnd(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) private {\r\n\t\temit ListEndChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].listEnd,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].listEnd = newValue;\r\n\t}\r\n\r\n}\r\n"
    },
    "contracts/IGamesController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IGamesController {\r\n\r\n\t\tfunction isAllowedToList(address potentialLister) external view returns (bool);\r\n\r\n\t\tfunction baseToken() external view returns (IERC20);\r\n\r\n\t\tfunction defaultMaxQuestionBid() external view returns (uint256);\r\n\r\n\t\tfunction defaultSponsorFractionOfOptionPool() external view returns (uint24);\r\n\r\n}\r\n"
    },
    "contracts/IQuestionsController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IQuestionsController {\r\n\r\n\t\tfunction isAllowedToList(uint gameID, address potentialLister) external view returns (bool);\r\n\r\n\t\tfunction gameToken(uint gameID) external view returns (IERC20);\r\n\r\n\t\tfunction maxQuestionBid(uint gameID) external view returns (uint256);\r\n\r\n\t\tfunction sponsorFractionOfOptionPool(uint gameID) external view returns (uint24);\r\n\r\n}\r\n"
    },
    "contracts/Locations.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"./PayableOwnable.sol\";\r\n\r\ncontract Locations is PayableOwnable {\r\n\r\n\tstruct Location {\r\n\t\t// TODO: Consider if some of these need to be immutable?\r\n\t\t// Work through all the implications of mutability.\r\n\t\taddress lister;\r\n\t\taddress signer;\r\n\t\tint48 picolat;\r\n\t\tint48 picolon;\r\n\t\tint32 cmAltitude;\r\n\t\tuint32 cmRadius; //uncertainty/size of location\r\n\t\tuint parent;\r\n\t\tuint lastUpdated; // Not independently mutable, but can be useful in sort tiebreak\r\n\t\tstring imageURI;\r\n\t\tstring venueURI;\r\n\t\tstring title140; // Up to 140 character title\r\n\t\tstring descr500; // Up to 500 character description\r\n\t}\r\n\r\n\tuint256 maxUsedID = 0; // 0 is not actually used, but reserved for the undefined/empty reference\r\n\tmapping(uint256 => Location) rows;\r\n\r\n\tevent Creation(\r\n\t\taddress indexed lister,\r\n\t\tuint indexed newId\r\n\t);\r\n\r\n\tevent ListerChanged(\r\n\t\tuint indexed rowID,\r\n\t\taddress indexed oldValue,\r\n\t\taddress indexed newValue\r\n\t);\r\n\r\n\tevent SignerChanged(\r\n\t\tuint indexed rowID,\r\n\t\taddress indexed oldValue,\r\n\t\taddress indexed newValue\r\n\t);\r\n\r\n\tevent PicolatChanged(\r\n\t\tuint indexed rowID,\r\n\t\tint48 oldValue,\r\n\t\tint48 newValue\r\n\t);\r\n\r\n\tevent PicolonChanged(\r\n\t\tuint indexed rowID,\r\n\t\tint48 oldValue,\r\n\t\tint48 newValue\r\n\t);\r\n\r\n\tevent CmAltitudeChanged(\r\n\t\tuint indexed rowID,\r\n\t\tint32 oldValue,\r\n\t\tint32 newValue\r\n\t);\r\n\r\n\tevent CmRadiusChanged(\r\n\t\tuint indexed rowID,\r\n\t\tuint32 oldValue,\r\n\t\tuint32 newValue\r\n\t);\r\n\r\n\tevent ParentChanged(\r\n\t\tuint indexed rowID,\r\n\t\tuint oldValue,\r\n\t\tuint newValue\r\n\t);\r\n\r\n\tevent ImageURIChanged(\r\n\t\tuint indexed rowID,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\tevent VenueURIChanged(\r\n\t\tuint indexed rowID,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\tevent Title140Changed(\r\n\t\tuint indexed rowID,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\tevent Descr500Changed(\r\n\t\tuint indexed rowID,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\terror PropertyChangeAttemptByNonLister(address attempter);\r\n\r\n\tmodifier onlyLister(uint rowID) {\r\n\t\t_checkLister(rowID); //Split out like OpenZeppelin's Ownable contract\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _checkLister(uint rowID) internal view virtual {\r\n\t\tif (rows[rowID].lister != msg.sender) {\r\n\t\t\trevert PropertyChangeAttemptByNonLister(_msgSender());\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(\r\n\t\taddress payable initialOwner\r\n\t)\r\n\t\tPayableOwnable(initialOwner)\r\n\t{\r\n\t}\r\n\r\n\tfunction create(\r\n\t\taddress lister,\r\n\t\tint48 picolat,\r\n\t\tint48 picolon,\r\n\t\tuint32 cmRadius\r\n\t) public {\r\n\t\tmaxUsedID++;\r\n\t\temit Creation(\r\n\t\t\tlister,\r\n\t\t\tmaxUsedID\r\n\t\t);\r\n\t\t_changeLister(\r\n\t\t\tmaxUsedID,\r\n\t\t\tlister\r\n\t\t);\r\n\t\t_changePicolat(\r\n\t\t\tmaxUsedID,\r\n\t\t\tpicolat\r\n\t\t);\r\n\t\t_changePicolon(\r\n\t\t\tmaxUsedID,\r\n\t\t\tpicolon\r\n\t\t);\r\n\t\t_changeCmRadius(\r\n\t\t\tmaxUsedID,\r\n\t\t\tcmRadius\r\n\t\t);\r\n\t\t_setLastUpdated(\r\n\t\t\tmaxUsedID\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _setLastUpdated(\r\n\t\tuint rowID\r\n\t) private {\r\n\t\trows[rowID].lastUpdated = block.timestamp;\r\n\t}\r\n\r\n\tfunction changeLister(\r\n\t\tuint rowID,\r\n\t\taddress newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeLister(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\t_setLastUpdated(rowID);\r\n\t}\r\n\r\n\tfunction _changeLister(\r\n\t\tuint rowID,\r\n\t\taddress newValue\r\n\t) private {\r\n\t\temit ListerChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].lister,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].lister = newValue;\r\n\t}\r\n\r\n\tfunction changeSigner(\r\n\t\tuint rowID,\r\n\t\taddress newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeSigner(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\t_setLastUpdated(rowID);\r\n\t}\r\n\r\n\tfunction _changeSigner(\r\n\t\tuint rowID,\r\n\t\taddress newValue\r\n\t) private {\r\n\t\temit SignerChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].signer,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].lister = newValue;\r\n\t}\r\n\r\n\t// A convenience combination function\r\n\tfunction changeCoordinates(\r\n\t\tuint rowID,\r\n\t\tint48 picolat,\r\n\t\tint48 picolon\r\n\t) public onlyLister(rowID) {\r\n\t\t_changePicolat(\r\n\t\t\trowID,\r\n\t\t\tpicolat\r\n\t\t);\r\n\t\t_changePicolon(\r\n\t\t\trowID,\r\n\t\t\tpicolon\r\n\t\t);\r\n\t\t_setLastUpdated(rowID);\r\n\t}\r\n\r\n\tfunction changePicolat(\r\n\t\tuint rowID,\r\n\t\tint48 newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changePicolat(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\t_setLastUpdated(rowID);\r\n\t}\r\n\r\n\tfunction _changePicolat(\r\n\t\tuint rowID,\r\n\t\tint48 newValue\r\n\t) private {\r\n\t\temit PicolatChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].picolat,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].picolat = newValue;\r\n\t}\r\n\r\n\tfunction changePicolon(\r\n\t\tuint rowID,\r\n\t\tint48 newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changePicolon(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\t_setLastUpdated(rowID);\r\n\t}\r\n\r\n\tfunction _changePicolon(\r\n\t\tuint rowID,\r\n\t\tint48 newValue\r\n\t) private {\r\n\t\temit PicolonChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].picolon,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].picolon = newValue;\r\n\t}\r\n\r\n\tfunction changeCmAltitude(\r\n\t\tuint rowID,\r\n\t\tint32 newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeCmAltitude(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\t_setLastUpdated(rowID);\r\n\t}\r\n\r\n\tfunction _changeCmAltitude(\r\n\t\tuint rowID,\r\n\t\tint32 newValue\r\n\t) private {\r\n\t\temit CmAltitudeChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].cmAltitude,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].cmAltitude = newValue;\r\n\t}\r\n\r\n\tfunction changeCmRadius(\r\n\t\tuint rowID,\r\n\t\tuint32 newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeCmRadius(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\t_setLastUpdated(rowID);\r\n\t}\r\n\r\n\tfunction _changeCmRadius(\r\n\t\tuint rowID,\r\n\t\tuint32 newValue\r\n\t) private {\r\n\t\temit CmRadiusChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].cmRadius,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].cmRadius = newValue;\r\n\t}\r\n\r\n\tfunction changeParent(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeParent(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\t_setLastUpdated(rowID);\r\n\t}\r\n\r\n\tfunction _changeParent(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) private {\r\n\t\temit ParentChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].parent,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].parent = newValue;\r\n\t}\r\n\r\n\tfunction changeImageURI(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeImageURI(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\t_setLastUpdated(rowID);\r\n\t}\r\n\r\n\tfunction _changeImageURI(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) private {\r\n\t\temit ImageURIChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].imageURI,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].imageURI = newValue;\r\n\t}\r\n\r\n\tfunction changeVenueURI(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeVenueURI(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\t_setLastUpdated(rowID);\r\n\t}\r\n\r\n\tfunction _changeVenueURI(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) private {\r\n\t\temit ImageURIChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].imageURI,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].imageURI = newValue;\r\n\t}\r\n\r\n\tfunction changeTitle140(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeTitle140(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\t_setLastUpdated(rowID);\r\n\t}\r\n\r\n\tfunction _changeTitle140(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) private {\r\n\t\temit Title140Changed(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].title140,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].title140 = newValue;\r\n\t}\r\n\r\n\tfunction changeDescr500(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeDescr500(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\t_setLastUpdated(rowID);\r\n\t}\r\n\r\n\tfunction _changeDescr500(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) private {\r\n\t\temit Descr500Changed(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].descr500,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].descr500 = newValue;\r\n\t}\r\n\r\n}\r\n"
    },
    "contracts/PayableOwnable.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\n//A simple extension of Ownable that allows withdrawal of funds sent to a contract.\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract PayableOwnable is Ownable {\r\n\r\n\tevent ERC20Withdrawal(\r\n\t\taddress recipient,\r\n\t\tuint256 amountPaidOut,\r\n\t\tIERC20 tokenContract\r\n\t);\r\n\r\n\tevent EthWithdrawal(\r\n\t\taddress recipient,\r\n\t\tuint256 amountPaidOut\r\n\t);\r\n\r\n\tconstructor(\r\n\t\taddress payable initialOwner\r\n\t)\r\n\t\tOwnable(initialOwner)\r\n\t{\r\n\t}\r\n\r\n\tfunction withdrawERC20Tokens(\r\n\t\taddress recipient,\r\n\t\tuint256 payAmount,\r\n\t\tIERC20 tokenContract\r\n\t) virtual public onlyOwner {\r\n\t\trequire(_withdrawERC20Tokens(\r\n\t\t\trecipient,\r\n\t\t\tpayAmount,\r\n\t\t\ttokenContract\r\n\t\t), 'Token withdrawal failed.');\r\n\t}\r\n\r\n\tfunction _withdrawERC20Tokens(\r\n\t\taddress recipient,\r\n\t\tuint256 payAmount,\r\n\t\tIERC20 tokenContract\r\n\t) internal returns (bool success) {\r\n\t\t//Balance check should be done in ERC20 contract transfer fn\r\n\t\ttokenContract.transfer(recipient, payAmount);\r\n\t\temit ERC20Withdrawal(\r\n\t\t\trecipient,\r\n\t\t\tpayAmount,\r\n\t\t\ttokenContract\r\n\t\t);\r\n\t\treturn tokenContract.transfer(recipient, payAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * Function that allows the owner to withdraw all the Ether in the contract\r\n\t * The function can only be called by the owner of the contract as defined by the modifier\r\n\t */\r\n\tfunction payoutEth(\r\n\t\taddress payable recipient\r\n\t) virtual public onlyOwner {\r\n\t\temit EthWithdrawal(\r\n\t\t\trecipient,\r\n\t\t\taddress(this).balance\r\n\t\t);\r\n\t\t(bool success, ) = payable(recipient).call{ value: address(this).balance }(\"\");\r\n\t\trequire(success, \"Failed to send Ether\");\r\n\t}\r\n\r\n\t/**\r\n\t * Function that allows the contract to receive ETH\r\n\t */\r\n\treceive() external payable {}\r\n}\r\n"
    },
    "contracts/Profiles.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\n//Having profile information is mainly important for game/question sponsors and referees,\r\n//but players can have them too; all positions are public.\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"./PayableOwnable.sol\";\r\n\r\ncontract Profiles is PayableOwnable {\r\n\r\n\tstruct Profile {\r\n\t\tstring imageURI;\r\n\t\tstring profileURI; // Could be linktree\r\n\t\tstring name75; // Up to 75 character name\r\n\t\tstring title140; // Up to 140 character title\r\n\t\tstring descr500; // Up to 500 character description\r\n\t}\r\n\r\n\tmapping(address => Profile) profiles;\r\n\r\n\tevent ImageURIChanged(\r\n\t\taddress indexed acct,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\tevent ProfileURIChanged(\r\n\t\taddress indexed acct,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\tevent Name75Changed(\r\n\t\taddress indexed acct,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\tevent Title140Changed(\r\n\t\taddress indexed acct,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\tevent Descr500Changed(\r\n\t\taddress indexed acct,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\tconstructor(\r\n\t\taddress payable initialOwner\r\n\t)\r\n\t\tPayableOwnable(initialOwner)\r\n\t{\r\n\t}\r\n\r\n\tfunction changeImageURI(\r\n\t\tstring calldata newValue\r\n\t) public {\r\n\t\temit ImageURIChanged(\r\n\t\t\tmsg.sender,\r\n\t\t\tprofiles[msg.sender].imageURI,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\tprofiles[msg.sender].imageURI = newValue;\r\n\t}\r\n\r\n\tfunction changeProfileURI(\r\n\t\tstring calldata newValue\r\n\t) public {\r\n\t\temit ProfileURIChanged(\r\n\t\t\tmsg.sender,\r\n\t\t\tprofiles[msg.sender].profileURI,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\tprofiles[msg.sender].profileURI = newValue;\r\n\t}\r\n\r\n\tfunction changeName75(\r\n\t\tstring calldata newValue\r\n\t) public {\r\n\t\temit Name75Changed(\r\n\t\t\tmsg.sender,\r\n\t\t\tprofiles[msg.sender].name75,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\tprofiles[msg.sender].name75 = newValue;\r\n\t}\r\n\r\n\tfunction changeTitle140(\r\n\t\tstring calldata newValue\r\n\t) public {\r\n\t\temit Title140Changed(\r\n\t\t\tmsg.sender,\r\n\t\t\tprofiles[msg.sender].title140,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\tprofiles[msg.sender].title140 = newValue;\r\n\t}\r\n\r\n\tfunction changeDescr500(\r\n\t\tstring calldata newValue\r\n\t) public {\r\n\t\temit Descr500Changed(\r\n\t\t\tmsg.sender,\r\n\t\t\tprofiles[msg.sender].descr500,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\tprofiles[msg.sender].descr500 = newValue;\r\n\t}\r\n\r\n}\r\n"
    },
    "contracts/Questions.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"./IQuestionsController.sol\";\r\nimport \"./PayableOwnable.sol\";\r\n\r\ncontract Questions is PayableOwnable {\r\n\r\n\tstruct Option {\r\n\t\tstring text; //up to 140 chars\r\n\t\tuint16 resolutionFraction;\r\n\t\tmapping(address => uint) playerPositions;\r\n\t\tuint optionPool;\r\n\t}\r\n\r\n\tstruct Question {\r\n\t\taddress lister;\r\n\t\tuint game; //immutable\r\n\t\tmapping(address => uint) sponsors; // uint is amount sponsored, in base tokens.\r\n\t\tuint totalSponsoredAmount;\r\n\t\t//TODO: Make Option its own struct?\r\n\t\t//Option[] options; //max length 26\r\n\t\tstring[] options; //up to 26 strings each up to 140 chars\r\n\t\tuint16[] resolutionFractions; //should total 10000 //or should that be -1000*sponsorFractionOfOptionPool?\r\n\t\tmapping(address => uint)[] playerPositions;\r\n\t\tuint[] optionPools;\r\n\t\tuint optionPoolsSum; // sum of the above array, but helps accelerate math\r\n\t\t//playerTotalInputs: uint is net amount total amount put in, in base tokens.\r\n\t\t//Adjusts only on moving tokens in and out of question, not among options.\r\n\t\t//Can't remove more until resolution, in case it's unresolvable and moves incl. winnings are reversed.\r\n\t\tmapping(address => int) playerTotalInputs; // Might be > sum(player's positions).\r\n\t\tbool isResolved; //irreversible\r\n\t\tbool unresolvable; //irreversible\r\n\t\tuint startTime;\r\n\t\tuint endTime; // for autopayout\r\n\t\t// See Games contract for comments about off-chain metadata\r\n\t\tstring imageURI;\r\n\t\tstring title140; // Up to 140 character title\r\n\t\tstring descr500; // Up to 500 character description\r\n\t}\r\n\r\n\tuint256 maxUsedID = 0; // 0 is not actually used, but reserved for the undefined/empty reference\r\n\tIQuestionsController controller;\r\n\tmapping(uint256 => Question) rows;\r\n\r\n\tevent Creation(\r\n\t\taddress indexed lister,\r\n\t\tuint indexed newId\r\n\t);\r\n\r\n\tevent ControllerChanged(\r\n\t\tIQuestionsController indexed oldValue,\r\n\t\tIQuestionsController indexed newValue\r\n\t);\r\n\r\n\tevent ListerChanged(\r\n\t\tuint indexed rowID,\r\n\t\taddress indexed oldValue,\r\n\t\taddress indexed newValue\r\n\t);\r\n\r\n\tevent SponsorshipAdded(\r\n\t\tuint indexed rowID,\r\n\t\taddress indexed sponsor,\r\n\t\tuint amountAdded,\r\n\t\tuint totalSponsorshipFromThisSponsor,\r\n\t\tuint totalSponsoredAmount\r\n\t);\r\n\r\n\tevent OptionAdded(\r\n\t\tuint indexed rowID,\r\n\t\tuint optionIndex,\r\n\t\tstring optionsAdded\r\n\t);\r\n\r\n\tevent OptionChanged(\r\n\t\tuint indexed rowID,\r\n\t\tuint8 optionID,\r\n\t\tstring oldText,\r\n\t\tstring newText\r\n\t);\r\n\r\n\tevent OptionRemoved(\r\n\t\tuint indexed rowID,\r\n\t\tuint8 optionID,\r\n\t\tstring oldText\r\n\t);\r\n\r\n\tevent PlayerTotalInputsChanged(\r\n\t\taddress indexed player,\r\n\t\tuint indexed rowID,\r\n\t\tint amountOfChange,\r\n\t\tuint newPlayerTotalInput\r\n\t);\r\n\r\n\tevent PositionChanged(\r\n\t\taddress indexed player,\r\n\t\tuint indexed rowID,\r\n\t\tuint8 optionIndex,\r\n\t\tint amountOfChange,\r\n\t\tuint newPositionForPlayer,\r\n\t\tuint newPoolForOption\r\n\t);\r\n\r\n\tevent Resolved(\r\n\t\tuint indexed rowID,\r\n\t\tbool isUnresolvable,\r\n\t\tuint16[] resolutionFractions\r\n\t);\r\n\r\n\tevent StartTimeChanged(\r\n\t\tuint indexed rowID,\r\n\t\tuint oldValue,\r\n\t\tuint newValue\r\n\t);\r\n\r\n\tevent EndTimeChanged(\r\n\t\tuint indexed rowID,\r\n\t\tuint oldValue,\r\n\t\tuint newValue\r\n\t);\r\n\r\n\tevent ImageURIChanged(\r\n\t\tuint indexed rowID,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\tevent Title140Changed(\r\n\t\tuint indexed rowID,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\tevent Descr500Changed(\r\n\t\tuint indexed rowID,\r\n\t\tstring oldValue,\r\n\t\tstring newValue\r\n\t);\r\n\r\n\terror NotAllowedToListInGame(address attempter); // 'This account is not currently allowed to create a new question in this game.'\r\n\r\n\terror PropertyChangeAttemptByNonLister(address attempter);\r\n\r\n\terror InvalidOptionID(uint rowID, uint8 optionID);\r\n\r\n\tmodifier onlyIfAllowedToList(uint gameID) {\r\n\t\t_checkIsAllowedToList(gameID);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _checkIsAllowedToList(uint gameID) internal view virtual {\r\n\t\tif (!controller.isAllowedToList(gameID, msg.sender)) {\r\n\t\t\trevert PropertyChangeAttemptByNonLister(_msgSender());\r\n\t\t}\r\n\t}\r\n\r\n\tmodifier onlyLister(uint rowID) {\r\n\t\t_checkLister(rowID); //Split out like OpenZeppelin's Ownable contract\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _checkLister(uint rowID) internal view virtual {\r\n\t\tif (rows[rowID].lister != msg.sender) {\r\n\t\t\trevert PropertyChangeAttemptByNonLister(_msgSender());\r\n\t\t}\r\n\t}\r\n\r\n\tmodifier onlyIfValidOptionID(uint rowID, uint8 optionID) {\r\n\t\t_checkOptionIDValidity(rowID, optionID); //Split out like OpenZeppelin's Ownable contract\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _checkOptionIDValidity(uint rowID, uint8 optionID) internal view virtual {\r\n\t\tif (optionID < rows[rowID].options.length) {\r\n\t\t\trevert InvalidOptionID(rowID, optionID);\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(\r\n\t\taddress payable initialOwner,\r\n\t\tIQuestionsController initialController\r\n\t)\r\n\t\tPayableOwnable(initialOwner)\r\n\t{\r\n\t\t_changeController(initialController);\r\n\t}\r\n\r\n\tfunction changeController(\r\n\t\tIQuestionsController newController\r\n\t) public onlyOwner {\r\n\t\t_changeController(\r\n\t\t\tnewController\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeController(\r\n\t\tIQuestionsController newController\r\n\t) private {\r\n\t\temit ControllerChanged(\r\n\t\t\tcontroller,\r\n\t\t\tnewController\r\n\t\t);\r\n\t\tcontroller = newController;\r\n\t}\r\n\r\n\tfunction create(\r\n\t\tuint gameID,\r\n\t\taddress lister,\r\n\t\tstring calldata title140,\r\n\t\tstring[] calldata options\r\n\t\t//endTime at default value of 0 here (goes w/game, which might change)\r\n\t\t//startTime at default value of 0 here\r\n\t) public onlyIfAllowedToList(gameID) {\r\n\t\t_create(\r\n\t\t\tgameID,\r\n\t\t\tlister,\r\n\t\t\ttitle140,\r\n\t\t\toptions,\r\n\t\t\t0,\r\n\t\t\t0\r\n\t\t);\r\n\t}\r\n\r\n\tfunction create(\r\n\t\tuint gameID,\r\n\t\taddress lister,\r\n\t\tstring calldata title140,\r\n\t\tstring[] calldata options,\r\n\t\tuint endTime\r\n\t\t//startTime at default value of 0 here\r\n\t) public onlyIfAllowedToList(gameID) {\r\n\t\t_create(\r\n\t\t\tgameID,\r\n\t\t\tlister,\r\n\t\t\ttitle140,\r\n\t\t\toptions,\r\n\t\t\tendTime,\r\n\t\t\t0\r\n\t\t);\r\n\t}\r\n\r\n\tfunction create(\r\n\t\tuint gameID,\r\n\t\taddress lister,\r\n\t\tstring calldata title140,\r\n\t\tstring[] calldata options,\r\n\t\tuint endTime,\r\n\t\tuint startTime\r\n\t) public onlyIfAllowedToList(gameID) {\r\n\t\t_create(\r\n\t\t\tgameID,\r\n\t\t\tlister,\r\n\t\t\ttitle140,\r\n\t\t\toptions,\r\n\t\t\tendTime,\r\n\t\t\tstartTime\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _create(\r\n\t\tuint gameID,\r\n\t\taddress lister,\r\n\t\tstring calldata title140,\r\n\t\tstring[] calldata options,\r\n\t\tuint endTime,\r\n\t\tuint startTime\r\n\t) private {\r\n\t\tmaxUsedID++;\r\n\t\temit Creation(\r\n\t\t\tlister,\r\n\t\t\tmaxUsedID\r\n\t\t);\r\n\t\trows[maxUsedID].game = gameID;\r\n\t\t_changeLister(\r\n\t\t\tmaxUsedID,\r\n\t\t\tlister\r\n\t\t);\r\n\t\t_changeTitle140(\r\n\t\t\tmaxUsedID,\r\n\t\t\ttitle140\r\n\t\t);\r\n\t\t_addOptions(\r\n\t\t\tmaxUsedID,\r\n\t\t\toptions\r\n\t\t);\r\n\t\t_changeEndTime(\r\n\t\t\tmaxUsedID,\r\n\t\t\tendTime\r\n\t\t);\r\n\t\t_changeStartTime(\r\n\t\t\tmaxUsedID,\r\n\t\t\tstartTime\r\n\t\t);\r\n\t}\r\n\r\n\tfunction changeLister(\r\n\t\tuint rowID,\r\n\t\taddress newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeLister(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeLister(\r\n\t\tuint rowID,\r\n\t\taddress newValue\r\n\t) private {\r\n\t\temit ListerChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].lister,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].lister = newValue;\r\n\t}\r\n\r\n\tfunction addSponsorship(\r\n\t\tuint rowID,\r\n\t\tuint amountToAdd,\r\n\t\taddress sponsor\r\n\t) public {\r\n\t\trows[rowID].sponsors[sponsor] += amountToAdd;\r\n\t\trows[rowID].totalSponsoredAmount += amountToAdd;\r\n\t\temit SponsorshipAdded(\r\n\t\t\trowID,\r\n\t\t\tsponsor,\r\n\t\t\tamountToAdd,\r\n\t\t\trows[rowID].sponsors[sponsor],\r\n\t\t\trows[rowID].totalSponsoredAmount\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tcontroller.gameToken(rows[rowID].game).transferFrom(msg.sender, address(controller), amountToAdd),\r\n\t\t\t'Sponsorship addition failed.'\r\n\t\t);\r\n\t}\r\n\r\n\tfunction addOptions(\r\n\t\tuint rowID,\r\n\t\tstring[] calldata options\r\n\t) public onlyLister(rowID) {\r\n\t\t//TODO: Add require conditions here\r\n\t\t_addOptions(\r\n\t\t\trowID,\r\n\t\t\toptions\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _addOptions(\r\n\t\tuint rowID,\r\n\t\tstring[] calldata options\r\n\t) private {\r\n\t\t//DOES allow duplicates but not empty strings\r\n\t\tbool found = false;\r\n\t\tfor(uint i = 0; i<options.length; i++) {\r\n\t\t\tif(rows[rowID].options.length >= 26) {\r\n\t\t\t\trevert('There is a maximum of 26 options per question.');\r\n\t\t\t}\r\n\t\t\tif(bytes(options[i]).length > 0) {\r\n\t\t\t\temit OptionAdded(\r\n\t\t\t\t\trowID,\r\n\t\t\t\t\trows[rowID].options.length,\r\n\t\t\t\t\toptions[i]\r\n\t\t\t\t);\r\n\t\t\t\trows[rowID].options.push(options[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction changeOption(\r\n\t\tuint rowID,\r\n\t\tuint8 optionID,\r\n\t\tstring calldata newText\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeOption(\r\n\t\t\trowID,\r\n\t\t\toptionID,\r\n\t\t\tnewText\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeOption(\r\n\t\tuint rowID,\r\n\t\tuint8 optionID,\r\n\t\tstring calldata newText\r\n\t) private onlyIfValidOptionID(rowID, optionID) {\r\n\t\t//DOES allow duplicates but not empty strings\r\n\t\t//Empty strings are an error here but just silently ignored when adding an array of options.\r\n\t\trequire(bytes(newText).length > 0, 'Empty-string options are not allowed.');\r\n\t\temit OptionChanged(\r\n\t\t\trowID,\r\n\t\t\toptionID,\r\n\t\t\trows[rowID].options[optionID],\r\n\t\t\tnewText\r\n\t\t);\r\n\t\trows[rowID].options[optionID] = newText;\r\n\t}\r\n\r\n\tfunction removeOption(\r\n\t\tuint rowID,\r\n\t\tuint8 optionID\r\n\t) public onlyLister(rowID) {\r\n\t\t_removeOption(\r\n\t\t\trowID,\r\n\t\t\toptionID\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _removeOption(\r\n\t\tuint rowID,\r\n\t\tuint8 optionID\r\n\t) private onlyIfValidOptionID(rowID, optionID) {\r\n\t\temit OptionRemoved(\r\n\t\t\trowID,\r\n\t\t\toptionID,\r\n\t\t\trows[rowID].options[optionID]\r\n\t\t);\r\n\t\trequire(rows[rowID].optionPools[optionID] <= 0, 'Cannot delete an option when players have an open position in it.');\r\n\t\tfor(uint i = optionID; i<rows[rowID].options.length-2; i++) {\r\n\t\t\trows[rowID].options[i] = rows[rowID].options[i+1];\r\n\t\t\trows[rowID].resolutionFractions[i] = rows[rowID].resolutionFractions[i+1];\r\n\t\t\t//TODO: This isn't assignable; consider struct strategy.\r\n\t\t\t//rows[rowID].playerPositions[i] = rows[rowID].playerPositions[i+1];\r\n\t\t\trows[rowID].optionPools[i] = rows[rowID].optionPools[i+1];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction changeStartTime(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeStartTime(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeStartTime(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) private {\r\n\t\temit StartTimeChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].startTime,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].startTime = newValue;\r\n\t}\r\n\r\n\tfunction changeEndTime(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeEndTime(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeEndTime(\r\n\t\tuint rowID,\r\n\t\tuint newValue\r\n\t) private {\r\n\t\temit EndTimeChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].endTime,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].endTime = newValue;\r\n\t}\r\n\r\n\tfunction markUnresolvableByLister(\r\n\t\tuint rowID\r\n\t) public onlyLister(rowID) {\r\n\t\t_markUnresolvable(\r\n\t\t\trowID\r\n\t\t);\r\n\t}\r\n\r\n\t// TODO: Add fn allowing referees in aggregate to mark unresolvable\r\n\r\n\t//Solidity can't figure out the type when passing [] inline\r\n\t//and there doesn't seem to be another valid casting strategy.\r\n\t//See https://github.com/ethereum/solidity/issues/12401\r\n\tfunction getEmptyUint16Array() private pure returns(uint16[] memory) {}\r\n\r\n\tfunction _markUnresolvable(\r\n\t\tuint rowID\r\n\t) private {\r\n\t\temit Resolved(\r\n\t\t\trowID,\r\n\t\t\ttrue,\r\n\t\t\tgetEmptyUint16Array()\r\n\t\t);\r\n\t\trows[rowID].unresolvable = true;\r\n\t\t//TODO: There's more to do here! Joint private fn shared with _resolve().\r\n\t}\r\n\r\n\t// TODO: Add fn allowing referees in aggregate to resolve\r\n\r\n\tfunction _resolve(\r\n\t\tuint rowID,\r\n\t\tuint16[] calldata resolutionFractions\r\n\t) private {\r\n\t\temit Resolved(\r\n\t\t\trowID,\r\n\t\t\tfalse,\r\n\t\t\tresolutionFractions\r\n\t\t);\r\n\t\trows[rowID].isResolved = true;\r\n\t\t//TODO: Process resolutionFractions, differently if using Options struct\r\n\t\trows[rowID].resolutionFractions = resolutionFractions;\r\n\t}\r\n\r\n\tfunction changeImageURI(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeImageURI(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeImageURI(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) private {\r\n\t\temit ImageURIChanged(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].imageURI,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].imageURI = newValue;\r\n\t}\r\n\r\n\tfunction changeTitle140(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeTitle140(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeTitle140(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) private {\r\n\t\temit Title140Changed(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].title140,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].title140 = newValue;\r\n\t}\r\n\r\n\tfunction changeDescr500(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) public onlyLister(rowID) {\r\n\t\t_changeDescr500(\r\n\t\t\trowID,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _changeDescr500(\r\n\t\tuint rowID,\r\n\t\tstring calldata newValue\r\n\t) private {\r\n\t\temit Descr500Changed(\r\n\t\t\trowID,\r\n\t\t\trows[rowID].descr500,\r\n\t\t\tnewValue\r\n\t\t);\r\n\t\trows[rowID].descr500 = newValue;\r\n\t}\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}